        -:    0:Source:linked_list_tests.c
        -:    0:Graph:linked_list_tests.gcno
        -:    0:Data:linked_list_tests.gcda
        -:    0:Runs:1
        -:    1:
        -:    2://#include "hash_table.h"
        -:    3:#include "linked_list.h"
        -:    4:#include <stddef.h>
        -:    5:#include <stdio.h>
        -:    6:#include <stdio.h>
        -:    7:#include <string.h>
        -:    8:#include <assert.h>
        -:    9:#include <CUnit/Basic.h>
        -:   10:#include "iterator.h"
        -:   11:#include "common.h"
        -:   12:/*
        -:   13:bool cmp_int(elem_t int1, elem_t int2)
        -:   14:{
        -:   15:  return ((int1.i - int2.i) == 0);
        -:   16:}
        -:   17:
        -:   18:bool cmp_str(elem_t str1, elem_t str2)
        -:   19:{
        -:   20:  return (strcmp(str1.str, str2.str) == 0);
        -:   21:}
        -:   22:*/
        -:   23:
        -:   24:
        1:   25:int init_suite(void) {
        -:   26:  // Change this function if you want to do something *before* you
        -:   27:  // run a test suite
        1:   28:  return 0;
        -:   29:}
        -:   30:
        1:   31:int clean_suite(void) {
        -:   32:  // Change this function if you want to do something *after* you
        -:   33:  // run a test suite
        1:   34:  return 0;
        -:   35:}
        -:   36:
        1:   37:void test_create_destroy()
        -:   38:{
        1:   39:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
        1:   40:  CU_ASSERT_PTR_NOT_NULL(list);
        1:   41:  ioopm_linked_list_destroy(list);
        -:   42:
        1:   43:  ioopm_list_t *list2 = ioopm_linked_list_create(cmp_int);
        1:   44:  CU_ASSERT_PTR_NOT_NULL(list2);
        -:   45:  //ioopm_linked_list_append(list2, 55);
        1:   46:  ioopm_linked_list_destroy(list2);
        1:   47:}
        -:   48:
        1:   49:void test_append(){
        1:   50:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
        1:   51:  CU_ASSERT_PTR_NOT_NULL(list);
        1:   52:  ioopm_linked_list_append(list, int_elem(55));
        1:   53:  ioopm_linked_list_append(list, int_elem(425));
        1:   54:  ioopm_linked_list_append(list, int_elem(1115));
        1:   55:  CU_ASSERT_TRUE(ioopm_linked_list_contains(list, int_elem(55)));
        1:   56:  CU_ASSERT_TRUE(ioopm_linked_list_contains(list, int_elem(425)));
        1:   57:  CU_ASSERT_TRUE(ioopm_linked_list_contains(list, int_elem(1115)));
        1:   58:  CU_ASSERT_EQUAL(55, ioopm_linked_list_get(list, 1).i);
        1:   59:  CU_ASSERT_EQUAL(425, ioopm_linked_list_get(list, 2).i);
        1:   60:  CU_ASSERT_EQUAL(1115, ioopm_linked_list_get(list, 3).i);
        1:   61:  ioopm_linked_list_destroy(list);
        1:   62:}
        -:   63:
        1:   64:void test_prepend(){
        1:   65:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
        1:   66:  CU_ASSERT_PTR_NOT_NULL(list);
        1:   67:  ioopm_linked_list_prepend(list, int_elem(55));
        1:   68:  ioopm_linked_list_prepend(list, int_elem(425));
        1:   69:  ioopm_linked_list_prepend(list, int_elem(1115));
        1:   70:  CU_ASSERT_TRUE(ioopm_linked_list_contains(list, int_elem(55)));
        1:   71:  CU_ASSERT_TRUE(ioopm_linked_list_contains(list, int_elem(425)));
        1:   72:  CU_ASSERT_TRUE(ioopm_linked_list_contains(list, int_elem(1115)));
        1:   73:  CU_ASSERT_EQUAL(1115, ioopm_linked_list_get(list, 1).i);
        1:   74:  CU_ASSERT_EQUAL(425, ioopm_linked_list_get(list, 2).i);
        1:   75:  CU_ASSERT_EQUAL(55, ioopm_linked_list_get(list, 3).i);
        1:   76:  ioopm_linked_list_destroy(list);
        1:   77:}
        -:   78:
        1:   79:void test_insertion(){
        1:   80:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
        1:   81:  ioopm_linked_list_insert(list,1,int_elem(11111));
        1:   82:  CU_ASSERT_EQUAL(11111, ioopm_linked_list_get(list, 1).i);
        1:   83:  ioopm_linked_list_insert(list,2,int_elem(22222));
        1:   84:  CU_ASSERT_EQUAL(22222, ioopm_linked_list_get(list, 2).i);
        1:   85:  ioopm_linked_list_insert(list,3,int_elem(33333));
        1:   86:  ioopm_linked_list_insert(list,4,int_elem(44444));
        1:   87:  CU_ASSERT_EQUAL(44444, ioopm_linked_list_get(list, 4).i);
        1:   88:  CU_ASSERT_EQUAL(33333, ioopm_linked_list_get(list, 3).i);
        1:   89:  ioopm_linked_list_destroy(list);
        1:   90:}
        -:   91:
        1:   92:void test_remove_link(){
        1:   93:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
        1:   94:  ioopm_linked_list_append(list, int_elem(55));
        1:   95:  ioopm_linked_list_prepend(list, int_elem(45));
        1:   96:  ioopm_linked_list_prepend(list, int_elem(35));
        1:   97:  ioopm_linked_list_prepend(list, int_elem(25));
        -:   98:  //printf("SIZE: %d\n", ioopm_linked_list_size(list));
        1:   99:  CU_ASSERT_TRUE(ioopm_linked_list_contains(list, int_elem(25)));
        1:  100:  CU_ASSERT_EQUAL(35, ioopm_linked_list_remove(list, 2).i); //Borde ta bort 35 från listans
        1:  101:  CU_ASSERT_FALSE(ioopm_linked_list_contains(list, int_elem(35)));
        1:  102:  ioopm_linked_list_destroy(list);
        1:  103:}
        -:  104:
        1:  105:void test_clear(){
        1:  106:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
        1:  107:  ioopm_linked_list_append(list, int_elem(55));
        1:  108:  ioopm_linked_list_prepend(list, int_elem(45));
        1:  109:  ioopm_linked_list_prepend(list, int_elem(35));
        1:  110:  ioopm_linked_list_prepend(list, int_elem(25));
        1:  111:  ioopm_linked_list_insert(list,1,int_elem(11111));
        1:  112:  ioopm_linked_list_insert(list,3,int_elem(22222));  //DUMMY-> [11111]->[25]->[22222]->[35]->[45]->[55]
        1:  113:  CU_ASSERT_EQUAL(6, ioopm_linked_list_size(list));
        1:  114:  CU_ASSERT_EQUAL(35, ioopm_linked_list_get(list,4).i); //Om insert, append,prepend är rätt ska pos 4 ha value 35
        1:  115:  CU_ASSERT_EQUAL(11111, ioopm_linked_list_get(list, 1).i);
        1:  116:  CU_ASSERT_EQUAL(25, ioopm_linked_list_get(list, 2).i);
        1:  117:  ioopm_linked_list_clear(list);
        1:  118:  CU_ASSERT_EQUAL(0, ioopm_linked_list_size(list));
        1:  119:  ioopm_linked_list_destroy(list);
        1:  120:}
        -:  121:
        1:  122:void test_get(){
        1:  123:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
        1:  124:  ioopm_linked_list_append(list, int_elem(55));
        1:  125:  ioopm_linked_list_append(list, int_elem(75));
        1:  126:  ioopm_linked_list_prepend(list, int_elem(45));
        1:  127:  ioopm_linked_list_prepend(list, int_elem(-35));
        1:  128:  ioopm_linked_list_append(list, int_elem(6));   //order: [-35]->[45]->[55]->[75]->[6]
        -:  129:  //printf("Size: %d\n", ioopm_linked_list_size(list));
        1:  130:  CU_ASSERT_EQUAL(-35, ioopm_linked_list_get(list, 1).i);
        1:  131:  CU_ASSERT_EQUAL(45, ioopm_linked_list_get(list, 2).i);
        1:  132:  CU_ASSERT_EQUAL(55, ioopm_linked_list_get(list, 3).i);
        1:  133:  CU_ASSERT_TRUE(ioopm_linked_list_contains(list, int_elem(75)));
        1:  134:  CU_ASSERT_EQUAL(6, ioopm_linked_list_get(list, 5).i);
        1:  135:  ioopm_linked_list_destroy(list);
        1:  136:}
        -:  137:
        1:  138:void test_linked_list_all(){
       11:  139:   bool rtrn_small_values(int key, elem_t value, void *x)
        -:  140:    {
       11:  141:      return value.i<100;
        -:  142:    }
        -:  143:
        1:  144:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
        -:  145:  // Test with empty ht
        1:  146:  CU_ASSERT_FALSE(ioopm_linked_list_all(list, rtrn_small_values , NULL));
        1:  147:  ioopm_linked_list_append(list, int_elem(2));
        1:  148:  ioopm_linked_list_append(list, int_elem(-7));
        1:  149:  ioopm_linked_list_prepend(list, int_elem(1));
        1:  150:  ioopm_linked_list_prepend(list, int_elem(-35));//index:   1     2    3     4    5
        1:  151:  ioopm_linked_list_append(list, int_elem(4));   //order: [-35]->[1]->[2]->[-7]->[4]
        1:  152:  CU_ASSERT_TRUE(ioopm_linked_list_all(list, rtrn_small_values , NULL));
        1:  153:  ioopm_linked_list_append(list, int_elem(200));
        1:  154:  ioopm_linked_list_append(list, int_elem(2233));
        1:  155:  ioopm_linked_list_append(list, int_elem(102));
        1:  156:  CU_ASSERT_FALSE(ioopm_linked_list_all(list, rtrn_small_values , NULL));
        1:  157:  ioopm_linked_list_destroy(list);
        1:  158:}
        -:  159:
        1:  160:void test_linked_list_any(){
       11:  161:  bool retrn_big_values(int key, elem_t value, void *x)
        -:  162:   {
       11:  163:     return value.i>100;
        -:  164:   }
        -:  165:
        1:  166:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
        -:  167:  // Test with empty ht
        1:  168:  CU_ASSERT_FALSE(ioopm_linked_list_any(list, retrn_big_values , NULL));
        1:  169:  ioopm_linked_list_append(list, int_elem(2));
        1:  170:  ioopm_linked_list_append(list, int_elem(-7));
        1:  171:  ioopm_linked_list_prepend(list, int_elem(1));
        1:  172:  ioopm_linked_list_prepend(list, int_elem(-35));//index:   1     2    3     4    5
        1:  173:  ioopm_linked_list_append(list, int_elem(4));   //order: [-35]->[1]->[2]->[-7]->[4]
        1:  174:  CU_ASSERT_FALSE(ioopm_linked_list_any(list, retrn_big_values , NULL)); //Test with only keys>values
        1:  175:  ioopm_linked_list_append(list, int_elem(200));
        1:  176:  ioopm_linked_list_append(list, int_elem(100));
        1:  177:  ioopm_linked_list_append(list, int_elem(99));
        1:  178:  CU_ASSERT_TRUE(ioopm_linked_list_any(list, retrn_big_values , NULL)); //Test with some values>keys == return TRUE
        1:  179:  ioopm_linked_list_destroy(list);
        1:  180:}
        -:  181:
        1:  182:void test_linked_list_apply_to_all(){
        8:  183:  void change_small_keys (int key, elem_t *value, void *x)
        -:  184:  {
        8:  185:    if (key <= 5)
        -:  186:    {
        5:  187:        value->i = 500;
        -:  188:    }
        8:  189:  }
        1:  190:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
        -:  191:  //Test to apply to an empty list:
        1:  192:  ioopm_linked_list_apply_to_all(list, change_small_keys, NULL);
        -:  193:
        1:  194:  ioopm_linked_list_insert(list,1,int_elem(1));
        1:  195:  ioopm_linked_list_insert(list,2,int_elem(2));
        1:  196:  ioopm_linked_list_insert(list,3,int_elem(3));
        1:  197:  ioopm_linked_list_insert(list,4,int_elem(4));
        1:  198:  ioopm_linked_list_insert(list,5,int_elem(5));
        1:  199:  ioopm_linked_list_insert(list,6,int_elem(100));
        1:  200:  ioopm_linked_list_insert(list,7,int_elem(101));
        1:  201:  ioopm_linked_list_insert(list,8,int_elem(102));
        -:  202:
        -:  203:  //ALL the values in the list should be the same as they wee at insertion:
        1:  204:  CU_ASSERT_EQUAL(1, ioopm_linked_list_get(list, 1).i);
        1:  205:  CU_ASSERT_EQUAL(2, ioopm_linked_list_get(list, 2).i);
        1:  206:  CU_ASSERT_EQUAL(100, ioopm_linked_list_get(list, 6).i);
        -:  207:
        -:  208:  //Use the  apply to all function:
        1:  209:  ioopm_linked_list_apply_to_all(list, change_small_keys, NULL);
        -:  210:
        -:  211:  //Check that value has changed for keys <= 5:
        1:  212:  CU_ASSERT_EQUAL(500, ioopm_linked_list_get(list, 1).i);
        1:  213:  CU_ASSERT_EQUAL(500, ioopm_linked_list_get(list, 2).i);
        1:  214:  CU_ASSERT_EQUAL(500, ioopm_linked_list_get(list, 3).i);
        1:  215:  CU_ASSERT_EQUAL(500, ioopm_linked_list_get(list, 4).i);
        1:  216:  CU_ASSERT_EQUAL(500, ioopm_linked_list_get(list, 5).i);
        -:  217:
        -:  218:  //Check that value is unchanged for keys > 5:
        1:  219:  CU_ASSERT_EQUAL(100, ioopm_linked_list_get(list, 6).i);
        1:  220:  CU_ASSERT_EQUAL(101, ioopm_linked_list_get(list, 7).i);
        1:  221:  CU_ASSERT_EQUAL(102, ioopm_linked_list_get(list, 8).i);
        -:  222:
        -:  223:  // Destroy list:
        1:  224:  ioopm_linked_list_destroy(list);
        -:  225:
        -:  226:/* EJ FUNGERANDE TODO???
        -:  227:ioopm_list_t *str_list = ioopm_linked_list_create(cmp_str);
        -:  228:ioopm_linked_list_insert(list,1,char_elem("Abbe"));
        -:  229:ioopm_linked_list_insert(list,2,char_elem("Ollibobbo"));
        -:  230:ioopm_linked_list_insert(list,3,char_elem("Kangas"));
        -:  231:ioopm_linked_list_insert(list,4,char_elem("Faffe"));
        -:  232:ioopm_linked_list_insert(list,5,char_elem("LUUDI"));
        -:  233:ioopm_linked_list_apply_to_all(str_list, change_small_keys, NULL);
        -:  234:CU_ASSERT_EQUAL("KINGS", ioopm_linked_list_get(list, 1).c);
        -:  235:CU_ASSERT_EQUAL("KINGS", ioopm_linked_list_get(list, 2).c);
        -:  236:CU_ASSERT_EQUAL("KINGS", ioopm_linked_list_get(list, 3).c);
        -:  237:CU_ASSERT_EQUAL("KINGS", ioopm_linked_list_get(list, 4).c);
        -:  238:CU_ASSERT_EQUAL("KINGS", ioopm_linked_list_get(list, 5).c);
        -:  239:  ioopm_linked_list_destroy(str_list);
        -:  240:  */
        1:  241:}
        -:  242:
        -:  243:////////////////////////////////////////////////////////////////////////////////
        -:  244:                      /*    ITERATOR TESTINGFUNCTIONS   */
        -:  245:////////////////////////////////////////////////////////////////////////////////
        -:  246:
        1:  247:void test_has_next_iter(){
        1:  248:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
        1:  249:  ioopm_list_iterator_t *iter = ioopm_list_iterator(list);
        -:  250:  //Check if empty list as next
        1:  251:  CU_ASSERT_FALSE(ioopm_iterator_has_next(iter));
        1:  252:  ioopm_linked_list_prepend(list,int_elem(233));
        1:  253:  ioopm_linked_list_insert(list,1,int_elem(2));
        1:  254:  ioopm_linked_list_append(list, int_elem(100));
        1:  255:  ioopm_linked_list_append(list, int_elem(200));   // [2]->[233]->[100]->[200]
        -:  256://Check if non-empty list has next
        1:  257:  ioopm_iterator_reset(iter);
        1:  258:  CU_ASSERT_TRUE(ioopm_iterator_has_next(iter));
        1:  259:  ioopm_iterator_destroy(iter);
        1:  260:  ioopm_linked_list_destroy(list);
        1:  261:}
        -:  262:
        1:  263:void test_next_iter(){
        1:  264:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
        1:  265:  ioopm_list_iterator_t *iter = ioopm_list_iterator(list);
        1:  266:  ioopm_linked_list_prepend(list,int_elem(233));
        1:  267:  ioopm_linked_list_insert(list,1,int_elem(2));
        1:  268:  ioopm_linked_list_append(list, int_elem(100));
        1:  269:  ioopm_linked_list_append(list, int_elem(200));   // [2]->[233]->[100]->[200]
        -:  270:
        -:  271:  //Go through first three links in the list with the iterator next
        1:  272:  ioopm_iterator_reset(iter);
        1:  273:  CU_ASSERT_EQUAL(2, ioopm_iterator_next(iter).i);
        1:  274:  CU_ASSERT_EQUAL(233, ioopm_iterator_next(iter).i);
        1:  275:  CU_ASSERT_EQUAL(100, ioopm_iterator_next(iter).i);
        -:  276:    //Reset the cursor to the first position, ie next should be 22.
        1:  277:  ioopm_iterator_reset(iter);
        1:  278:  CU_ASSERT_EQUAL(2, ioopm_iterator_next(iter).i);
        1:  279:  ioopm_iterator_destroy(iter);
        1:  280:  ioopm_linked_list_destroy(list);
        1:  281:}
        -:  282:
        1:  283:void test_reset_current(){
        1:  284:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
        1:  285:  ioopm_list_iterator_t *iter = ioopm_list_iterator(list);
        1:  286:  ioopm_linked_list_prepend(list,int_elem(-233));
        1:  287:  ioopm_linked_list_insert(list,1,int_elem(0));
        1:  288:  ioopm_linked_list_append(list, int_elem(100));
        1:  289:  ioopm_linked_list_append(list, int_elem(200));   // [0]->[-233]->[100]->[200]
        -:  290:
        1:  291:  ioopm_iterator_next(iter);
        1:  292:  ioopm_iterator_next(iter);
        1:  293:  CU_ASSERT_EQUAL(-233, ioopm_iterator_current(iter).i);
        1:  294:  CU_ASSERT_EQUAL(-233, ioopm_iterator_current(iter).i);
        1:  295:  CU_ASSERT_NOT_EQUAL(233, ioopm_iterator_current(iter).i);
        1:  296:  ioopm_iterator_reset(iter);
        1:  297:  CU_ASSERT_EQUAL(0, ioopm_iterator_current(iter).i); //Current cursor is on dummy
        1:  298:  ioopm_iterator_next(iter);
        1:  299:  CU_ASSERT_EQUAL(0, ioopm_iterator_current(iter).i); //The first link is 0 aswell.
        1:  300:  ioopm_iterator_next(iter);
        1:  301:  ioopm_iterator_next(iter);
        1:  302:  CU_ASSERT_EQUAL(100, ioopm_iterator_current(iter).i);
        1:  303:  ioopm_iterator_destroy(iter);
        1:  304:  ioopm_linked_list_destroy(list);
        1:  305:}
        -:  306:
        -:  307:///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        -:  308:
        1:  309:int main() {
        -:  310:  // First we try to set up CUnit, and exit if we fail
        1:  311:  if (CU_initialize_registry() != CUE_SUCCESS)
    #####:  312:    return CU_get_error();
        -:  313:
        -:  314:  // We then create an empty test suite and specify the name and
        -:  315:  // the init and cleanup functions
        1:  316:  CU_pSuite my_test_suite = CU_add_suite("My awesome test suite", init_suite, clean_suite);
        1:  317:  if (my_test_suite == NULL) {
        -:  318:      // If the test suite could not be added, tear down CUnit and exit
    #####:  319:      CU_cleanup_registry();
    #####:  320:      return CU_get_error();
        -:  321:  }
        -:  322:
        -:  323:  // This is where we add the test functions to our test suite.
        -:  324:  // For each call to CU_add_test we specify the test suite, the
        -:  325:  // name or description of the test, and the function that runs
        -:  326:  // the test in question. If you want to add another test, just
        -:  327:  // copy a line below and change the information
        1:  328:  if (
        2:  329:    (CU_add_test(my_test_suite, "Create and Destroy list", test_create_destroy)==NULL)||
        2:  330:    (CU_add_test(my_test_suite, "Append", test_append)==NULL)||
        2:  331:    (CU_add_test(my_test_suite, "Prepend", test_prepend)==NULL)||
        2:  332:    (CU_add_test(my_test_suite, "Insert", test_insertion)==NULL)||
        2:  333:    (CU_add_test(my_test_suite, "Remove", test_remove_link)==NULL)||
        2:  334:    (CU_add_test(my_test_suite, "Clear", test_clear)==NULL)||
        2:  335:    (CU_add_test(my_test_suite, "Get function", test_get)==NULL)||
        2:  336:    (CU_add_test(my_test_suite, "All function", test_linked_list_all)==NULL)||
        2:  337:    (CU_add_test(my_test_suite, "Any function", test_linked_list_any)==NULL)||
        2:  338:    (CU_add_test(my_test_suite, "Apply to all function", test_linked_list_apply_to_all)==NULL)||
        2:  339:    (CU_add_test(my_test_suite, "Test has next iterator", test_has_next_iter)==NULL)||
        2:  340:    (CU_add_test(my_test_suite, "Test next iterator", test_next_iter)==NULL)||
        1:  341:    (CU_add_test(my_test_suite, "Test reset iterator", test_reset_current)==NULL)||
        -:  342:    0
        -:  343:  )
        -:  344:    {
        -:  345:      // If adding any of the tests fails, we tear down CUnit and exit
    #####:  346:      CU_cleanup_registry();
    #####:  347:      return CU_get_error();
        -:  348:    }
        -:  349:
        -:  350:  // Set the running mode. Use CU_BRM_VERBOSE for maximum output.
        -:  351:  // Use CU_BRM_NORMAL to only print errors and a summary
        1:  352:  CU_basic_set_mode(CU_BRM_VERBOSE);
        -:  353:
        -:  354:  // This is where the tests are actually run!
        1:  355:  CU_basic_run_tests();
        -:  356:
        -:  357:  // Tear down CUnit before exiting
        1:  358:  CU_cleanup_registry();
        1:  359:  return CU_get_error();
        -:  360:}
