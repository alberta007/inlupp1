        -:    0:Source:linked_list_tests.c
        -:    0:Graph:linked_list_tests.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:
        -:    2://#include "hash_table.h"
        -:    3:#include "linked_list.h"
        -:    4:#include <stddef.h>
        -:    5:#include <stdio.h>
        -:    6:#include <stdio.h>
        -:    7:#include <string.h>
        -:    8:#include <assert.h>
        -:    9:#include <CUnit/Basic.h>
        -:   10:#include "iterator.h"
        -:   11:#include "common.h"
        -:   12:/*
        -:   13:bool cmp_int(elem_t int1, elem_t int2)
        -:   14:{
        -:   15:  return ((int1.i - int2.i) == 0);
        -:   16:}
        -:   17:
        -:   18:bool cmp_str(elem_t str1, elem_t str2)
        -:   19:{
        -:   20:  return (strcmp(str1.str, str2.str) == 0);
        -:   21:}
        -:   22:*/
        -:   23:
        -:   24:
function init_suite called 0 returned 0% blocks executed 0%
    #####:   25:int init_suite(void) {
        -:   26:  // Change this function if you want to do something *before* you
        -:   27:  // run a test suite
    #####:   28:  return 0;
    %%%%%:   28-block  0
unconditional  0 never executed
        -:   29:}
        -:   30:
function clean_suite called 0 returned 0% blocks executed 0%
    #####:   31:int clean_suite(void) {
        -:   32:  // Change this function if you want to do something *after* you
        -:   33:  // run a test suite
    #####:   34:  return 0;
    %%%%%:   34-block  0
unconditional  0 never executed
        -:   35:}
        -:   36:
function test_create_destroy called 0 returned 0% blocks executed 0%
    #####:   37:void test_create_destroy()
        -:   38:{
    #####:   39:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
    %%%%%:   39-block  0
call    0 never executed
    #####:   40:  CU_ASSERT_PTR_NOT_NULL(list);
call    0 never executed
    #####:   41:  ioopm_linked_list_destroy(list);
call    0 never executed
        -:   42:
    #####:   43:  ioopm_list_t *list2 = ioopm_linked_list_create(cmp_int);
call    0 never executed
    #####:   44:  CU_ASSERT_PTR_NOT_NULL(list2);
call    0 never executed
        -:   45:  //ioopm_linked_list_append(list2, 55);
    #####:   46:  ioopm_linked_list_destroy(list2);
call    0 never executed
    #####:   47:}
        -:   48:
function test_append called 0 returned 0% blocks executed 0%
    #####:   49:void test_append(){
    #####:   50:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
    %%%%%:   50-block  0
call    0 never executed
    #####:   51:  CU_ASSERT_PTR_NOT_NULL(list);
call    0 never executed
    #####:   52:  ioopm_linked_list_append(list, int_elem(55));
call    0 never executed
    #####:   53:  ioopm_linked_list_append(list, int_elem(425));
call    0 never executed
    #####:   54:  ioopm_linked_list_append(list, int_elem(1115));
call    0 never executed
    #####:   55:  CU_ASSERT_TRUE(ioopm_linked_list_contains(list, int_elem(55)));
call    0 never executed
call    1 never executed
    #####:   56:  CU_ASSERT_TRUE(ioopm_linked_list_contains(list, int_elem(425)));
call    0 never executed
call    1 never executed
    #####:   57:  CU_ASSERT_TRUE(ioopm_linked_list_contains(list, int_elem(1115)));
call    0 never executed
call    1 never executed
    #####:   58:  CU_ASSERT_EQUAL(55, ioopm_linked_list_get(list, 1).i);
call    0 never executed
call    1 never executed
    #####:   59:  CU_ASSERT_EQUAL(425, ioopm_linked_list_get(list, 2).i);
call    0 never executed
call    1 never executed
    #####:   60:  CU_ASSERT_EQUAL(1115, ioopm_linked_list_get(list, 3).i);
call    0 never executed
call    1 never executed
    #####:   61:  ioopm_linked_list_destroy(list);
call    0 never executed
    #####:   62:}
        -:   63:
function test_prepend called 0 returned 0% blocks executed 0%
    #####:   64:void test_prepend(){
    #####:   65:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
    %%%%%:   65-block  0
call    0 never executed
    #####:   66:  CU_ASSERT_PTR_NOT_NULL(list);
call    0 never executed
    #####:   67:  ioopm_linked_list_prepend(list, int_elem(55));
call    0 never executed
    #####:   68:  ioopm_linked_list_prepend(list, int_elem(425));
call    0 never executed
    #####:   69:  ioopm_linked_list_prepend(list, int_elem(1115));
call    0 never executed
    #####:   70:  CU_ASSERT_TRUE(ioopm_linked_list_contains(list, int_elem(55)));
call    0 never executed
call    1 never executed
    #####:   71:  CU_ASSERT_TRUE(ioopm_linked_list_contains(list, int_elem(425)));
call    0 never executed
call    1 never executed
    #####:   72:  CU_ASSERT_TRUE(ioopm_linked_list_contains(list, int_elem(1115)));
call    0 never executed
call    1 never executed
    #####:   73:  CU_ASSERT_EQUAL(1115, ioopm_linked_list_get(list, 1).i);
call    0 never executed
call    1 never executed
    #####:   74:  CU_ASSERT_EQUAL(425, ioopm_linked_list_get(list, 2).i);
call    0 never executed
call    1 never executed
    #####:   75:  CU_ASSERT_EQUAL(55, ioopm_linked_list_get(list, 3).i);
call    0 never executed
call    1 never executed
    #####:   76:  ioopm_linked_list_destroy(list);
call    0 never executed
    #####:   77:}
        -:   78:
function test_insertion called 0 returned 0% blocks executed 0%
    #####:   79:void test_insertion(){
    #####:   80:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
    %%%%%:   80-block  0
call    0 never executed
    #####:   81:  ioopm_linked_list_insert(list,1,int_elem(11111));
call    0 never executed
    #####:   82:  CU_ASSERT_EQUAL(11111, ioopm_linked_list_get(list, 1).i);
call    0 never executed
call    1 never executed
    #####:   83:  ioopm_linked_list_insert(list,2,int_elem(22222));
call    0 never executed
    #####:   84:  CU_ASSERT_EQUAL(22222, ioopm_linked_list_get(list, 2).i);
call    0 never executed
call    1 never executed
    #####:   85:  ioopm_linked_list_insert(list,3,int_elem(33333));
call    0 never executed
    #####:   86:  ioopm_linked_list_insert(list,4,int_elem(44444));
call    0 never executed
    #####:   87:  CU_ASSERT_EQUAL(44444, ioopm_linked_list_get(list, 4).i);
call    0 never executed
call    1 never executed
    #####:   88:  CU_ASSERT_EQUAL(33333, ioopm_linked_list_get(list, 3).i);
call    0 never executed
call    1 never executed
    #####:   89:  ioopm_linked_list_destroy(list);
call    0 never executed
    #####:   90:}
        -:   91:
function test_remove_link called 0 returned 0% blocks executed 0%
    #####:   92:void test_remove_link(){
    #####:   93:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
    %%%%%:   93-block  0
call    0 never executed
    #####:   94:  ioopm_linked_list_append(list, int_elem(55));
call    0 never executed
    #####:   95:  ioopm_linked_list_prepend(list, int_elem(45));
call    0 never executed
    #####:   96:  ioopm_linked_list_prepend(list, int_elem(35));
call    0 never executed
    #####:   97:  ioopm_linked_list_prepend(list, int_elem(25));
call    0 never executed
        -:   98:  //printf("SIZE: %d\n", ioopm_linked_list_size(list));
    #####:   99:  CU_ASSERT_TRUE(ioopm_linked_list_contains(list, int_elem(25)));
call    0 never executed
call    1 never executed
    #####:  100:  CU_ASSERT_EQUAL(35, ioopm_linked_list_remove(list, 2).i); //Borde ta bort 35 från listans
call    0 never executed
call    1 never executed
    #####:  101:  CU_ASSERT_FALSE(ioopm_linked_list_contains(list, int_elem(35)));
call    0 never executed
call    1 never executed
    #####:  102:  ioopm_linked_list_destroy(list);
call    0 never executed
    #####:  103:}
        -:  104:
function test_clear called 0 returned 0% blocks executed 0%
    #####:  105:void test_clear(){
    #####:  106:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
    %%%%%:  106-block  0
call    0 never executed
    #####:  107:  ioopm_linked_list_append(list, int_elem(55));
call    0 never executed
    #####:  108:  ioopm_linked_list_prepend(list, int_elem(45));
call    0 never executed
    #####:  109:  ioopm_linked_list_prepend(list, int_elem(35));
call    0 never executed
    #####:  110:  ioopm_linked_list_prepend(list, int_elem(25));
call    0 never executed
    #####:  111:  ioopm_linked_list_insert(list,1,int_elem(11111));
call    0 never executed
    #####:  112:  ioopm_linked_list_insert(list,3,int_elem(22222));  //DUMMY-> [11111]->[25]->[22222]->[35]->[45]->[55]
call    0 never executed
    #####:  113:  CU_ASSERT_EQUAL(6, ioopm_linked_list_size(list));
call    0 never executed
call    1 never executed
    #####:  114:  CU_ASSERT_EQUAL(35, ioopm_linked_list_get(list,4).i); //Om insert, append,prepend är rätt ska pos 4 ha value 35
call    0 never executed
call    1 never executed
    #####:  115:  CU_ASSERT_EQUAL(11111, ioopm_linked_list_get(list, 1).i);
call    0 never executed
call    1 never executed
    #####:  116:  CU_ASSERT_EQUAL(25, ioopm_linked_list_get(list, 2).i);
call    0 never executed
call    1 never executed
    #####:  117:  ioopm_linked_list_clear(list);
call    0 never executed
    #####:  118:  CU_ASSERT_EQUAL(0, ioopm_linked_list_size(list));
call    0 never executed
call    1 never executed
    #####:  119:  ioopm_linked_list_destroy(list);
call    0 never executed
    #####:  120:}
        -:  121:
function test_get called 0 returned 0% blocks executed 0%
    #####:  122:void test_get(){
    #####:  123:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
    %%%%%:  123-block  0
call    0 never executed
    #####:  124:  ioopm_linked_list_append(list, int_elem(55));
call    0 never executed
    #####:  125:  ioopm_linked_list_append(list, int_elem(75));
call    0 never executed
    #####:  126:  ioopm_linked_list_prepend(list, int_elem(45));
call    0 never executed
    #####:  127:  ioopm_linked_list_prepend(list, int_elem(-35));
call    0 never executed
    #####:  128:  ioopm_linked_list_append(list, int_elem(6));   //order: [-35]->[45]->[55]->[75]->[6]
call    0 never executed
        -:  129:  //printf("Size: %d\n", ioopm_linked_list_size(list));
    #####:  130:  CU_ASSERT_EQUAL(-35, ioopm_linked_list_get(list, 1).i);
call    0 never executed
call    1 never executed
    #####:  131:  CU_ASSERT_EQUAL(45, ioopm_linked_list_get(list, 2).i);
call    0 never executed
call    1 never executed
    #####:  132:  CU_ASSERT_EQUAL(55, ioopm_linked_list_get(list, 3).i);
call    0 never executed
call    1 never executed
    #####:  133:  CU_ASSERT_TRUE(ioopm_linked_list_contains(list, int_elem(75)));
call    0 never executed
call    1 never executed
    #####:  134:  CU_ASSERT_EQUAL(6, ioopm_linked_list_get(list, 5).i);
call    0 never executed
call    1 never executed
    #####:  135:  ioopm_linked_list_destroy(list);
call    0 never executed
    #####:  136:}
        -:  137:
function test_linked_list_all called 0 returned 0% blocks executed 0%
    #####:  138:void test_linked_list_all(){
    %%%%%:  138-block  0
call    0 never executed
function rtrn_small_values.4605 called 0 returned 0% blocks executed 0%
    #####:  139:   bool rtrn_small_values(int key, elem_t value, void *x)
        -:  140:    {
    #####:  141:      return value.i<100;
    %%%%%:  141-block  0
unconditional  0 never executed
        -:  142:    }
        -:  143:
    #####:  144:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
call    0 never executed
        -:  145:  // Test with empty ht
    #####:  146:  CU_ASSERT_FALSE(ioopm_linked_list_all(list, rtrn_small_values , NULL));
call    0 never executed
call    1 never executed
    #####:  147:  ioopm_linked_list_append(list, int_elem(2));
call    0 never executed
    #####:  148:  ioopm_linked_list_append(list, int_elem(-7));
call    0 never executed
    #####:  149:  ioopm_linked_list_prepend(list, int_elem(1));
call    0 never executed
    #####:  150:  ioopm_linked_list_prepend(list, int_elem(-35));//index:   1     2    3     4    5
call    0 never executed
    #####:  151:  ioopm_linked_list_append(list, int_elem(4));   //order: [-35]->[1]->[2]->[-7]->[4]
call    0 never executed
    #####:  152:  CU_ASSERT_TRUE(ioopm_linked_list_all(list, rtrn_small_values , NULL));
call    0 never executed
call    1 never executed
    #####:  153:  ioopm_linked_list_append(list, int_elem(200));
call    0 never executed
    #####:  154:  ioopm_linked_list_append(list, int_elem(2233));
call    0 never executed
    #####:  155:  ioopm_linked_list_append(list, int_elem(102));
call    0 never executed
    #####:  156:  CU_ASSERT_FALSE(ioopm_linked_list_all(list, rtrn_small_values , NULL));
call    0 never executed
call    1 never executed
    #####:  157:  ioopm_linked_list_destroy(list);
call    0 never executed
    #####:  158:}
        -:  159:
function test_linked_list_any called 0 returned 0% blocks executed 0%
    #####:  160:void test_linked_list_any(){
    %%%%%:  160-block  0
call    0 never executed
function retrn_big_values.4621 called 0 returned 0% blocks executed 0%
    #####:  161:  bool retrn_big_values(int key, elem_t value, void *x)
        -:  162:   {
    #####:  163:     return value.i>100;
    %%%%%:  163-block  0
unconditional  0 never executed
        -:  164:   }
        -:  165:
    #####:  166:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
call    0 never executed
        -:  167:  // Test with empty ht
    #####:  168:  CU_ASSERT_FALSE(ioopm_linked_list_any(list, retrn_big_values , NULL));
call    0 never executed
call    1 never executed
    #####:  169:  ioopm_linked_list_append(list, int_elem(2));
call    0 never executed
    #####:  170:  ioopm_linked_list_append(list, int_elem(-7));
call    0 never executed
    #####:  171:  ioopm_linked_list_prepend(list, int_elem(1));
call    0 never executed
    #####:  172:  ioopm_linked_list_prepend(list, int_elem(-35));//index:   1     2    3     4    5
call    0 never executed
    #####:  173:  ioopm_linked_list_append(list, int_elem(4));   //order: [-35]->[1]->[2]->[-7]->[4]
call    0 never executed
    #####:  174:  CU_ASSERT_FALSE(ioopm_linked_list_any(list, retrn_big_values , NULL)); //Test with only keys>values
call    0 never executed
call    1 never executed
    #####:  175:  ioopm_linked_list_append(list, int_elem(200));
call    0 never executed
    #####:  176:  ioopm_linked_list_append(list, int_elem(100));
call    0 never executed
    #####:  177:  ioopm_linked_list_append(list, int_elem(99));
call    0 never executed
    #####:  178:  CU_ASSERT_TRUE(ioopm_linked_list_any(list, retrn_big_values , NULL)); //Test with some values>keys == return TRUE
call    0 never executed
call    1 never executed
    #####:  179:  ioopm_linked_list_destroy(list);
call    0 never executed
    #####:  180:}
        -:  181:
function test_linked_list_apply_to_all called 0 returned 0% blocks executed 0%
    #####:  182:void test_linked_list_apply_to_all(){
    %%%%%:  182-block  0
call    0 never executed
function change_small_keys.4637 called 0 returned 0% blocks executed 0%
    #####:  183:  void change_small_keys (int key, elem_t *value, void *x)
        -:  184:  {
    #####:  185:    if (key <= 5)
    %%%%%:  185-block  0
branch  0 never executed
branch  1 never executed
        -:  186:    {
    #####:  187:        value->i = 500;
    %%%%%:  187-block  0
unconditional  0 never executed
        -:  188:    }
    #####:  189:  }
    #####:  190:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
call    0 never executed
        -:  191:  //Test to apply to an empty list:
    #####:  192:  ioopm_linked_list_apply_to_all(list, change_small_keys, NULL);
call    0 never executed
        -:  193:
    #####:  194:  ioopm_linked_list_insert(list,1,int_elem(1));
call    0 never executed
    #####:  195:  ioopm_linked_list_insert(list,2,int_elem(2));
call    0 never executed
    #####:  196:  ioopm_linked_list_insert(list,3,int_elem(3));
call    0 never executed
    #####:  197:  ioopm_linked_list_insert(list,4,int_elem(4));
call    0 never executed
    #####:  198:  ioopm_linked_list_insert(list,5,int_elem(5));
call    0 never executed
    #####:  199:  ioopm_linked_list_insert(list,6,int_elem(100));
call    0 never executed
    #####:  200:  ioopm_linked_list_insert(list,7,int_elem(101));
call    0 never executed
    #####:  201:  ioopm_linked_list_insert(list,8,int_elem(102));
call    0 never executed
        -:  202:
        -:  203:  //ALL the values in the list should be the same as they wee at insertion:
    #####:  204:  CU_ASSERT_EQUAL(1, ioopm_linked_list_get(list, 1).i);
call    0 never executed
call    1 never executed
    #####:  205:  CU_ASSERT_EQUAL(2, ioopm_linked_list_get(list, 2).i);
call    0 never executed
call    1 never executed
    #####:  206:  CU_ASSERT_EQUAL(100, ioopm_linked_list_get(list, 6).i);
call    0 never executed
call    1 never executed
        -:  207:
        -:  208:  //Use the  apply to all function:
    #####:  209:  ioopm_linked_list_apply_to_all(list, change_small_keys, NULL);
call    0 never executed
        -:  210:
        -:  211:  //Check that value has changed for keys <= 5:
    #####:  212:  CU_ASSERT_EQUAL(500, ioopm_linked_list_get(list, 1).i);
call    0 never executed
call    1 never executed
    #####:  213:  CU_ASSERT_EQUAL(500, ioopm_linked_list_get(list, 2).i);
call    0 never executed
call    1 never executed
    #####:  214:  CU_ASSERT_EQUAL(500, ioopm_linked_list_get(list, 3).i);
call    0 never executed
call    1 never executed
    #####:  215:  CU_ASSERT_EQUAL(500, ioopm_linked_list_get(list, 4).i);
call    0 never executed
call    1 never executed
    #####:  216:  CU_ASSERT_EQUAL(500, ioopm_linked_list_get(list, 5).i);
call    0 never executed
call    1 never executed
        -:  217:
        -:  218:  //Check that value is unchanged for keys > 5:
    #####:  219:  CU_ASSERT_EQUAL(100, ioopm_linked_list_get(list, 6).i);
call    0 never executed
call    1 never executed
    #####:  220:  CU_ASSERT_EQUAL(101, ioopm_linked_list_get(list, 7).i);
call    0 never executed
call    1 never executed
    #####:  221:  CU_ASSERT_EQUAL(102, ioopm_linked_list_get(list, 8).i);
call    0 never executed
call    1 never executed
        -:  222:
        -:  223:  // Destroy list:
    #####:  224:  ioopm_linked_list_destroy(list);
call    0 never executed
        -:  225:
        -:  226:/* EJ FUNGERANDE TODO???
        -:  227:ioopm_list_t *str_list = ioopm_linked_list_create(cmp_str);
        -:  228:ioopm_linked_list_insert(list,1,char_elem("Abbe"));
        -:  229:ioopm_linked_list_insert(list,2,char_elem("Ollibobbo"));
        -:  230:ioopm_linked_list_insert(list,3,char_elem("Kangas"));
        -:  231:ioopm_linked_list_insert(list,4,char_elem("Faffe"));
        -:  232:ioopm_linked_list_insert(list,5,char_elem("LUUDI"));
        -:  233:ioopm_linked_list_apply_to_all(str_list, change_small_keys, NULL);
        -:  234:CU_ASSERT_EQUAL("KINGS", ioopm_linked_list_get(list, 1).c);
        -:  235:CU_ASSERT_EQUAL("KINGS", ioopm_linked_list_get(list, 2).c);
        -:  236:CU_ASSERT_EQUAL("KINGS", ioopm_linked_list_get(list, 3).c);
        -:  237:CU_ASSERT_EQUAL("KINGS", ioopm_linked_list_get(list, 4).c);
        -:  238:CU_ASSERT_EQUAL("KINGS", ioopm_linked_list_get(list, 5).c);
        -:  239:  ioopm_linked_list_destroy(str_list);
        -:  240:  */
    #####:  241:}
        -:  242:
        -:  243:////////////////////////////////////////////////////////////////////////////////
        -:  244:                      /*    ITERATOR TESTINGFUNCTIONS   */
        -:  245:////////////////////////////////////////////////////////////////////////////////
        -:  246:
function test_has_next_iter called 0 returned 0% blocks executed 0%
    #####:  247:void test_has_next_iter(){
    #####:  248:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
    %%%%%:  248-block  0
call    0 never executed
    #####:  249:  ioopm_list_iterator_t *iter = ioopm_list_iterator(list);
call    0 never executed
        -:  250:  //Check if empty list as next
    #####:  251:  CU_ASSERT_FALSE(ioopm_iterator_has_next(iter));
call    0 never executed
call    1 never executed
    #####:  252:  ioopm_linked_list_prepend(list,int_elem(233));
call    0 never executed
    #####:  253:  ioopm_linked_list_insert(list,1,int_elem(2));
call    0 never executed
    #####:  254:  ioopm_linked_list_append(list, int_elem(100));
call    0 never executed
    #####:  255:  ioopm_linked_list_append(list, int_elem(200));   // [2]->[233]->[100]->[200]
call    0 never executed
        -:  256://Check if non-empty list has next
    #####:  257:  ioopm_iterator_reset(iter);
call    0 never executed
    #####:  258:  CU_ASSERT_TRUE(ioopm_iterator_has_next(iter));
call    0 never executed
call    1 never executed
    #####:  259:  ioopm_iterator_destroy(iter);
call    0 never executed
    #####:  260:  ioopm_linked_list_destroy(list);
call    0 never executed
    #####:  261:}
        -:  262:
function test_next_iter called 0 returned 0% blocks executed 0%
    #####:  263:void test_next_iter(){
    #####:  264:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
    %%%%%:  264-block  0
call    0 never executed
    #####:  265:  ioopm_list_iterator_t *iter = ioopm_list_iterator(list);
call    0 never executed
    #####:  266:  ioopm_linked_list_prepend(list,int_elem(233));
call    0 never executed
    #####:  267:  ioopm_linked_list_insert(list,1,int_elem(2));
call    0 never executed
    #####:  268:  ioopm_linked_list_append(list, int_elem(100));
call    0 never executed
    #####:  269:  ioopm_linked_list_append(list, int_elem(200));   // [2]->[233]->[100]->[200]
call    0 never executed
        -:  270:
        -:  271:  //Go through first three links in the list with the iterator next
    #####:  272:  ioopm_iterator_reset(iter);
call    0 never executed
    #####:  273:  CU_ASSERT_EQUAL(2, ioopm_iterator_next(iter).i);
call    0 never executed
call    1 never executed
    #####:  274:  CU_ASSERT_EQUAL(233, ioopm_iterator_next(iter).i);
call    0 never executed
call    1 never executed
    #####:  275:  CU_ASSERT_EQUAL(100, ioopm_iterator_next(iter).i);
call    0 never executed
call    1 never executed
        -:  276:    //Reset the cursor to the first position, ie next should be 22.
    #####:  277:  ioopm_iterator_reset(iter);
call    0 never executed
    #####:  278:  CU_ASSERT_EQUAL(2, ioopm_iterator_next(iter).i);
call    0 never executed
call    1 never executed
    #####:  279:  ioopm_iterator_destroy(iter);
call    0 never executed
    #####:  280:  ioopm_linked_list_destroy(list);
call    0 never executed
    #####:  281:}
        -:  282:
function test_reset_current called 0 returned 0% blocks executed 0%
    #####:  283:void test_reset_current(){
    #####:  284:  ioopm_list_t *list = ioopm_linked_list_create(cmp_int);
    %%%%%:  284-block  0
call    0 never executed
    #####:  285:  ioopm_list_iterator_t *iter = ioopm_list_iterator(list);
call    0 never executed
    #####:  286:  ioopm_linked_list_prepend(list,int_elem(-233));
call    0 never executed
    #####:  287:  ioopm_linked_list_insert(list,1,int_elem(0));
call    0 never executed
    #####:  288:  ioopm_linked_list_append(list, int_elem(100));
call    0 never executed
    #####:  289:  ioopm_linked_list_append(list, int_elem(200));   // [0]->[-233]->[100]->[200]
call    0 never executed
        -:  290:
    #####:  291:  ioopm_iterator_next(iter);
call    0 never executed
    #####:  292:  ioopm_iterator_next(iter);
call    0 never executed
    #####:  293:  CU_ASSERT_EQUAL(-233, ioopm_iterator_current(iter).i);
call    0 never executed
call    1 never executed
    #####:  294:  CU_ASSERT_EQUAL(-233, ioopm_iterator_current(iter).i);
call    0 never executed
call    1 never executed
    #####:  295:  CU_ASSERT_NOT_EQUAL(233, ioopm_iterator_current(iter).i);
call    0 never executed
call    1 never executed
    #####:  296:  ioopm_iterator_reset(iter);
call    0 never executed
    #####:  297:  CU_ASSERT_EQUAL(0, ioopm_iterator_current(iter).i); //Current cursor is on dummy
call    0 never executed
call    1 never executed
    #####:  298:  ioopm_iterator_next(iter);
call    0 never executed
    #####:  299:  CU_ASSERT_EQUAL(0, ioopm_iterator_current(iter).i); //The first link is 0 aswell.
call    0 never executed
call    1 never executed
    #####:  300:  ioopm_iterator_next(iter);
call    0 never executed
    #####:  301:  ioopm_iterator_next(iter);
call    0 never executed
    #####:  302:  CU_ASSERT_EQUAL(100, ioopm_iterator_current(iter).i);
call    0 never executed
call    1 never executed
    #####:  303:  ioopm_iterator_destroy(iter);
call    0 never executed
    #####:  304:  ioopm_linked_list_destroy(list);
call    0 never executed
    #####:  305:}
        -:  306:
        -:  307:///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        -:  308:
function main called 0 returned 0% blocks executed 0%
    #####:  309:int main() {
        -:  310:  // First we try to set up CUnit, and exit if we fail
    #####:  311:  if (CU_initialize_registry() != CUE_SUCCESS)
    %%%%%:  311-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  312:    return CU_get_error();
    %%%%%:  312-block  0
call    0 never executed
unconditional  1 never executed
        -:  313:
        -:  314:  // We then create an empty test suite and specify the name and
        -:  315:  // the init and cleanup functions
    #####:  316:  CU_pSuite my_test_suite = CU_add_suite("My awesome test suite", init_suite, clean_suite);
    %%%%%:  316-block  0
call    0 never executed
    #####:  317:  if (my_test_suite == NULL) {
branch  0 never executed
branch  1 never executed
        -:  318:      // If the test suite could not be added, tear down CUnit and exit
    #####:  319:      CU_cleanup_registry();
    %%%%%:  319-block  0
call    0 never executed
    #####:  320:      return CU_get_error();
call    0 never executed
unconditional  1 never executed
        -:  321:  }
        -:  322:
        -:  323:  // This is where we add the test functions to our test suite.
        -:  324:  // For each call to CU_add_test we specify the test suite, the
        -:  325:  // name or description of the test, and the function that runs
        -:  326:  // the test in question. If you want to add another test, just
        -:  327:  // copy a line below and change the information
    #####:  328:  if (
branch  0 never executed
branch  1 never executed
    #####:  329:    (CU_add_test(my_test_suite, "Create and Destroy list", test_create_destroy)==NULL)||
    %%%%%:  329-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  330:    (CU_add_test(my_test_suite, "Append", test_append)==NULL)||
    %%%%%:  330-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  331:    (CU_add_test(my_test_suite, "Prepend", test_prepend)==NULL)||
    %%%%%:  331-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  332:    (CU_add_test(my_test_suite, "Insert", test_insertion)==NULL)||
    %%%%%:  332-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  333:    (CU_add_test(my_test_suite, "Remove", test_remove_link)==NULL)||
    %%%%%:  333-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  334:    (CU_add_test(my_test_suite, "Clear", test_clear)==NULL)||
    %%%%%:  334-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  335:    (CU_add_test(my_test_suite, "Get function", test_get)==NULL)||
    %%%%%:  335-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  336:    (CU_add_test(my_test_suite, "All function", test_linked_list_all)==NULL)||
    %%%%%:  336-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  337:    (CU_add_test(my_test_suite, "Any function", test_linked_list_any)==NULL)||
    %%%%%:  337-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  338:    (CU_add_test(my_test_suite, "Apply to all function", test_linked_list_apply_to_all)==NULL)||
    %%%%%:  338-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  339:    (CU_add_test(my_test_suite, "Test has next iterator", test_has_next_iter)==NULL)||
    %%%%%:  339-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  340:    (CU_add_test(my_test_suite, "Test next iterator", test_next_iter)==NULL)||
    %%%%%:  340-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  341:    (CU_add_test(my_test_suite, "Test reset iterator", test_reset_current)==NULL)||
    %%%%%:  341-block  0
call    0 never executed
        -:  342:    0
        -:  343:  )
        -:  344:    {
        -:  345:      // If adding any of the tests fails, we tear down CUnit and exit
    #####:  346:      CU_cleanup_registry();
    %%%%%:  346-block  0
call    0 never executed
    #####:  347:      return CU_get_error();
call    0 never executed
unconditional  1 never executed
        -:  348:    }
        -:  349:
        -:  350:  // Set the running mode. Use CU_BRM_VERBOSE for maximum output.
        -:  351:  // Use CU_BRM_NORMAL to only print errors and a summary
    #####:  352:  CU_basic_set_mode(CU_BRM_VERBOSE);
    %%%%%:  352-block  0
call    0 never executed
        -:  353:
        -:  354:  // This is where the tests are actually run!
    #####:  355:  CU_basic_run_tests();
call    0 never executed
        -:  356:
        -:  357:  // Tear down CUnit before exiting
    #####:  358:  CU_cleanup_registry();
call    0 never executed
    #####:  359:  return CU_get_error();
call    0 never executed
unconditional  1 never executed
        -:  360:}
