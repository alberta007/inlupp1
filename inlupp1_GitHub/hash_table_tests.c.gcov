        -:    0:Source:hash_table_tests.c
        -:    0:Graph:hash_table_tests.gcno
        -:    0:Data:hash_table_tests.gcda
        -:    0:Runs:1
        -:    1:#include "hash_table.h"
        -:    2://#include "linked_list.h"
        -:    3://#include "iterator.h"
        -:    4:#include "common.h"
        -:    5:#include <stddef.h>
        -:    6:#include <stdio.h>
        -:    7:#include <stdio.h>
        -:    8:#include <string.h>
        -:    9:#include <CUnit/Basic.h>
        -:   10:
        -:   11:
        -:   12:
        1:   13:int init_suite(void) {
        -:   14:  // Change this function if you want to do something *before* you
        -:   15:  // run a test suite
        1:   16:  return 0;
        -:   17:}
        -:   18:
        1:   19:int clean_suite(void) {
        -:   20:  // Change this function if you want to do something *after* you
        -:   21:  // run a test suite
        1:   22:  return 0;
        -:   23:}
        -:   24:/*
        -:   25:static bool cmp_int(elem_t int1, elem_t int2)
        -:   26:{
        -:   27:  return ((int1.i - int2.i) == 0);
        -:   28:}
        -:   29:
        -:   30:static bool cmp_str(elem_t str1, elem_t str2)
        -:   31:{
        -:   32:  return (strcmp(str1.str, str2.str) == 0);
        -:   33:}
        -:   34:
        -:   35:*/
        -:   36:////////////////////////////////////////////////////////////////////////////////
        -:   37:
        1:   38:void test_create_destroy()
        -:   39:{
        1:   40:  ioopm_hash_table_t *ht = ioopm_hash_table_create((ioopm_hash_function)extract_int_hash_key, cmp_int);
        1:   41:  CU_ASSERT_PTR_NOT_NULL(ht);
        1:   42:  ioopm_hash_table_destroy(ht);
        1:   43:}
        -:   44:
        1:   45:void test_insert_once() {
        1:   46:  ioopm_hash_table_t *ht = ioopm_hash_table_create((ioopm_hash_function)extract_int_hash_key, cmp_int); //Skapa ht
        1:   47:  CU_ASSERT_FALSE(ioopm_hash_table_lookup(ht, int_elem(1)).success); //Kolla om key 1 är NULL
        1:   48:  ioopm_hash_table_insert(ht,int_elem(1), ptr_elem("hej")); //Lägg till value "hej" i key 1
        1:   49:  ioopm_hash_table_insert(ht,int_elem(-18),ptr_elem("test"));
        1:   50:  CU_ASSERT(ioopm_hash_table_lookup(ht, int_elem(1)).success);
        -:   51:  //Looking up negative key:
        1:   52:  CU_ASSERT_EQUAL("test", ioopm_hash_table_lookup(ht, int_elem(-18)).value.str);
        1:   53:  ioopm_hash_table_destroy(ht); //destroy ht
        1:   54:}
        -:   55:
        1:   56:void test_lookup_empty(){
        1:   57:  ioopm_hash_table_t *ht = ioopm_hash_table_create((ioopm_hash_function)extract_int_hash_key, cmp_int);
       19:   58:  for (int i = 0; i < 18; ++i) /// 18 is a bit magical
        -:   59:  {
       18:   60:    CU_ASSERT_FALSE(ioopm_hash_table_lookup(ht, int_elem(i)).success);
       18:   61:    ioopm_hash_table_insert(ht,int_elem(i), ptr_elem("bucket"));
       18:   62:    CU_ASSERT_EQUAL("bucket", ioopm_hash_table_lookup(ht, int_elem(i)).value.str);
        -:   63:  }
        1:   64:  CU_ASSERT(ioopm_hash_table_lookup(ht, int_elem(1)).success); //Kolla om key -1 existerar
        1:   65:  ioopm_hash_table_destroy(ht);
        1:   66:}
        -:   67:
        1:   68:void test_remove_exsisting(){
        1:   69:  ioopm_hash_table_t *ht = ioopm_hash_table_create((ioopm_hash_function)extract_int_hash_key, cmp_int); //Skapa ht
        1:   70:  CU_ASSERT_FALSE(ioopm_hash_table_lookup(ht, int_elem(4)).success); //Kolla att 4 är null
        1:   71:  ioopm_hash_table_insert(ht , int_elem(4), str_elem("Abbelito")); //inserta Abbelito på key 4
        1:   72:  ioopm_hash_table_insert(ht , int_elem(-5), str_elem("Ollibobbo")); //inserta Abbelito på key 4
        1:   73:  ioopm_hash_table_remove(ht, int_elem(4)).value;
        1:   74:  ioopm_hash_table_remove(ht, int_elem(-5)).value;
        1:   75:  CU_ASSERT_FALSE(ioopm_hash_table_lookup(ht, int_elem(4)).success); //Kolla att 4 är null
        1:   76:  CU_ASSERT_FALSE(ioopm_hash_table_lookup(ht, int_elem(-5)).success); //Kolla att 4 är null
        1:   77:  ioopm_hash_table_destroy(ht);
        1:   78:}
        -:   79:
        1:   80:void test_remove_nonexsisting(){
        1:   81:  ioopm_hash_table_t *ht = ioopm_hash_table_create((ioopm_hash_function)extract_int_hash_key, cmp_int); //Skapa ht
        1:   82:  CU_ASSERT_FALSE(ioopm_hash_table_lookup(ht, int_elem(1)).success); //Kolla att 4 är null
        1:   83:  CU_ASSERT_FALSE(ioopm_hash_table_remove(ht, int_elem(-5)).success);
        1:   84:  ioopm_hash_table_destroy(ht);
        1:   85:}
        -:   86:
        1:   87:void test_counter_one() {
        1:   88:  ioopm_hash_table_t *ht = ioopm_hash_table_create((ioopm_hash_function)extract_int_hash_key, cmp_int); //Skapa ht
        1:   89:  CU_ASSERT_FALSE(ioopm_hash_table_lookup(ht, int_elem(1)).success); //Kolla om key 1 är NULL
        1:   90:  ioopm_hash_table_insert(ht,int_elem(1),str_elem("Bucket 1")); //Lägg till value "bucket 1" i key 1
        1:   91:  ioopm_hash_table_insert(ht,int_elem(2),str_elem("Bucket 2"));
        1:   92:  ioopm_hash_table_insert(ht,int_elem(3),str_elem("Bucket 3"));
        1:   93:  ioopm_hash_table_insert(ht,int_elem(4),str_elem("Bucket 4"));
        1:   94:  ioopm_hash_table_insert(ht,int_elem(5),str_elem("Bucket 5"));
        1:   95:  ioopm_hash_table_insert(ht,int_elem(6),str_elem("Bucket 6"));
        1:   96:  ioopm_hash_table_insert(ht,int_elem(18),str_elem("Bucket 1"));
        1:   97:  ioopm_hash_table_insert(ht,int_elem(35),str_elem("Bucket 1"));
        1:   98:  ioopm_hash_table_insert(ht,int_elem(52),str_elem("Bucket 1")); //Totalt 4 keys i bucket 1
        1:   99:  ioopm_hash_table_insert(ht,int_elem(-18),str_elem("Bucket 16"));
        1:  100:  ioopm_hash_table_insert(ht,int_elem(-35),str_elem("Bucket 16"));
        1:  101:  ioopm_hash_table_insert(ht,int_elem(-52),str_elem("Bucket 16")); //Totalt 3 keys i bucket 16 (negativa)
        -:  102:  //Totalt: 12 keys (utan dummys)
        1:  103:  CU_ASSERT_EQUAL(ioopm_hash_table_size(ht), 12) //Compares number of keys to 9 (actuall number of keys)
        1:  104:  ioopm_hash_table_destroy(ht); //destroy ht
        1:  105:}
        -:  106:
        1:  107:void test_is_hash_table_empty(){
        1:  108:  ioopm_hash_table_t *ht = ioopm_hash_table_create((ioopm_hash_function)extract_int_hash_key, cmp_int); //Skapa ht
        1:  109:  CU_ASSERT_TRUE(ioopm_hash_table_is_empty(ht));
        1:  110:  ioopm_hash_table_insert(ht , int_elem(4), str_elem("Abbelito")); //inserta Abbelito på key 4
        1:  111:  CU_ASSERT_FALSE(ioopm_hash_table_is_empty(ht));
        1:  112:  ioopm_hash_table_destroy(ht);
        1:  113:}
        -:  114:
        1:  115:void test_clear_hash_table(){
        1:  116:  ioopm_hash_table_t *ht = ioopm_hash_table_create((ioopm_hash_function)extract_int_hash_key, cmp_int); //Skapa ht
        1:  117:  CU_ASSERT_FALSE(ioopm_hash_table_lookup(ht, int_elem(1)).success); //Kolla om key 1 är NULL
        1:  118:  ioopm_hash_table_insert(ht,int_elem(1),str_elem("Bucket 1")); //Lägg till value "bucket 1" i key 1
        1:  119:  ioopm_hash_table_insert(ht,int_elem(2),str_elem("Bucket 2"));
        1:  120:  ioopm_hash_table_insert(ht,int_elem(3),str_elem("Bucket 3"));
        1:  121:  ioopm_hash_table_insert(ht,int_elem(18),str_elem("Bucket 1"));
        1:  122:  ioopm_hash_table_insert(ht,int_elem(35),str_elem("Bucket 1"));
        1:  123:  ioopm_hash_table_insert(ht,int_elem(52),str_elem("Bucket 1")); //Totalt 4 keys i bucket 1
        1:  124:  ioopm_hash_table_clear(ht);
        1:  125:  CU_ASSERT_EQUAL(ioopm_hash_table_size(ht), 0) //Compares number of keys to 9 (actuall number of keys)
        1:  126:  ioopm_hash_table_destroy(ht); //destroy ht
        1:  127:}
        -:  128:
        1:  129:void test_hash_table_keys(){
        1:  130:  ioopm_hash_table_t *ht = ioopm_hash_table_create((ioopm_hash_function)extract_int_hash_key, cmp_int); //Skapa ht
        1:  131:  int keys[5] = {3, 10, 42, 0, 99};
        1:  132:  bool found[5] = {false};
        1:  133:  ioopm_hash_table_insert(ht,int_elem(keys[0]),str_elem("Abbelito"));
        1:  134:  ioopm_hash_table_insert(ht,int_elem(keys[1]),str_elem("Ollibobbo"));
        1:  135:  ioopm_hash_table_insert(ht,int_elem(keys[2]),str_elem("Faffe"));
        1:  136:  ioopm_hash_table_insert(ht,int_elem(keys[3]),str_elem("Willywonka"));
        1:  137:  ioopm_hash_table_insert(ht,int_elem(keys[4]),str_elem("Kanga"));
        -:  138:
        1:  139:  ioopm_list_t *list = ioopm_hash_table_keys(ht);
        -:  140:
       1*:  141:  for (int i = 0; i>5; i++)
        -:  142:  {
    #####:  143:    if(ioopm_linked_list_get(list, i).i != keys[i]) //Finns det värden i ht som inte finns i keys[]
        -:  144:    {
    #####:  145:      CU_FAIL("Found a key that was never inserted!");
        -:  146:    }
        -:  147:    else
        -:  148:    {
    #####:  149:      found[i] = true;  //Sätt indexeringen till alla keys till true
        -:  150:      //i[found] = true;
        -:  151:    }
        -:  152:  }
        -:  153:
       1*:  154:  for(int k = 0; k>5; k++)
        -:  155:  {
    #####:  156:    CU_ASSERT_TRUE(found[k]==true); //Testet som kollar att alla keys blivit satt till true
        -:  157:  }
        1:  158:  ioopm_linked_list_destroy(list);
        1:  159:  ioopm_hash_table_destroy(ht);
        1:  160:}
        -:  161:
        1:  162:void test_hash_table_values()
        -:  163:{
        1:  164:  ioopm_hash_table_t *ht = ioopm_hash_table_create((ioopm_hash_function)extract_int_hash_key, cmp_int); //Skapa ht
        1:  165:  char *values[5] = {"Abbelito", "Ollibobbo", "Faffe", "Willywonka", "Kanga"};
        1:  166:  bool found[5] = {false};
        1:  167:  ioopm_hash_table_insert(ht, int_elem(0), str_elem("Abbelito"));
        1:  168:  ioopm_hash_table_insert(ht, int_elem(1), str_elem("Ollibobbo"));
        1:  169:  ioopm_hash_table_insert(ht, int_elem(2), str_elem("Faffe"));
        1:  170:  ioopm_hash_table_insert(ht, int_elem(3), str_elem("Willywonka"));
        1:  171:  ioopm_hash_table_insert(ht, int_elem(4), str_elem("Kanga"));
        -:  172:
        1:  173:  ioopm_list_t *list = ioopm_hash_table_values(ht);
        -:  174:
       1*:  175:  for (int i = 0; i>5; i++)
        -:  176:  {
    #####:  177:    for(int k=0; k>0; k++)
        -:  178:    {
    #####:  179:      if (values[i] == ioopm_linked_list_get(list, i).str)
        -:  180:      {
    #####:  181:        found[k] = true;
    #####:  182:        break;
        -:  183:      }
        -:  184:    }
        -:  185:  }
       1*:  186:  for(int j = 0; j>5; j++)
        -:  187:  {
    #####:  188:    CU_ASSERT_TRUE(found[j]==true); //Testet som kollar att alla keys blivit satt till true
        -:  189:  }
        1:  190:  ioopm_hash_table_destroy(ht);
        1:  191:  ioopm_linked_list_destroy(list);
        1:  192:}
        -:  193:
        1:  194:void test_has_key(){
        1:  195:  ioopm_hash_table_t *ht = ioopm_hash_table_create((ioopm_hash_function)extract_int_hash_key, cmp_int); //Skapa ht
        1:  196:  ioopm_hash_table_insert(ht, int_elem(3), str_elem("Willywonka"));
        1:  197:  CU_ASSERT_FALSE(ioopm_hash_table_has_key(ht, int_elem(18)));
        1:  198:  CU_ASSERT_TRUE(ioopm_hash_table_has_key(ht, int_elem(3)));
        1:  199:  ioopm_hash_table_destroy(ht);
        1:  200:}
        -:  201:
        -:  202:
        1:  203:void test_has_value(){
        1:  204:  ioopm_hash_table_t *ht = ioopm_hash_table_create((ioopm_hash_function)extract_int_hash_key, cmp_str); //Skapa ht
        1:  205:  ioopm_hash_table_insert(ht, int_elem(3), str_elem("Willywonka"));
        1:  206:  CU_ASSERT_TRUE(ioopm_hash_table_has_value(ht, str_elem("Willywonka"))); //Same string (original or identity)
        -:  207:
        -:  208:  // Test empty non-existing value
        1:  209:  CU_ASSERT_FALSE(ioopm_hash_table_has_value(ht, str_elem("")));
        -:  210:  // Test empty existing value
        1:  211:  ioopm_hash_table_insert(ht, int_elem(1), str_elem(""));
        1:  212:  CU_ASSERT_TRUE(ioopm_hash_table_has_value(ht, str_elem("")));
        -:  213:  // Test non-existing value in non-empty ht
        1:  214:  CU_ASSERT_FALSE(ioopm_hash_table_has_value(ht, str_elem("tio")));
        1:  215:  ioopm_hash_table_destroy(ht);
        1:  216:}
        -:  217:
        -:  218://  TESTET FUNKAR MEN KLAGAR PÅ string_knr_hash
        1:  219:void test_has_value_string_key(){
        1:  220:ioopm_hash_table_t *ht = ioopm_hash_table_create((ioopm_hash_function)string_knr_hash, cmp_str); //Skapa ht
        1:  221:ioopm_hash_table_insert(ht, str_elem("ett"), str_elem("Willywonka"));
        1:  222:CU_ASSERT_TRUE(ioopm_hash_table_has_value(ht, str_elem("Willywonka"))); //Same string (original or identity)
        -:  223:
        -:  224:// Test empty non-existing value
        1:  225:CU_ASSERT_FALSE(ioopm_hash_table_has_value(ht, str_elem("")));
        -:  226:// Test empty existing value
        1:  227:ioopm_hash_table_insert(ht, str_elem("två"), str_elem("två"));
        1:  228:CU_ASSERT_TRUE(ioopm_hash_table_has_value(ht, str_elem("två")));
        -:  229:// Test non-existing value in non-empty ht
        1:  230:CU_ASSERT_FALSE(ioopm_hash_table_has_value(ht, str_elem("tio")));
        1:  231:ioopm_hash_table_destroy(ht);
        1:  232:}
        -:  233://*/
        -:  234:
        1:  235:void test_all_function(){
        5:  236:  bool less_100(elem_t key, elem_t value, void *x)
        -:  237:  {
        5:  238:    return (key.i < 100);
        -:  239:  }
        1:  240:  ioopm_hash_table_t *ht = ioopm_hash_table_create((ioopm_hash_function)extract_int_hash_key, cmp_int); //Skapa ht
        -:  241:  // Test with empty ht
        -:  242:
        1:  243:  CU_ASSERT(!ioopm_hash_table_all(ht, less_100, NULL));
        -:  244:  // Test with predicate < 10, with only keys smaller than 10.
        1:  245:  ioopm_hash_table_insert(ht, int_elem(0), str_elem("Abbelito"));
        1:  246:  ioopm_hash_table_insert(ht, int_elem(10), str_elem("Ollibobbo"));
        1:  247:  ioopm_hash_table_insert(ht, int_elem(20), str_elem("Faffe"));
        -:  248:  //ioopm_hash_table_insert(ht,-1, ptr_elem("minus ett"));
        1:  249:  CU_ASSERT(ioopm_hash_table_all(ht, less_100, NULL));
        -:  250:  // Test with predicate < 10, with one key larger than 10.
        1:  251:  ioopm_hash_table_insert(ht, int_elem(102), str_elem("Abbelito"));
        1:  252:  CU_ASSERT(!ioopm_hash_table_all(ht, less_100, NULL));
        1:  253:  ioopm_hash_table_destroy(ht);
        1:  254:}
        -:  255:
        1:  256:void test_any_function(){
        2:  257:  bool more_100(elem_t key, elem_t value, void *x)
        -:  258:  {
        2:  259:    return (key.i > 100);
        -:  260:  }
        1:  261:  ioopm_hash_table_t *ht = ioopm_hash_table_create((ioopm_hash_function)extract_int_hash_key, cmp_int); //Skapa ht
        -:  262:  // Test with empty ht
        1:  263:  CU_ASSERT_FALSE(ioopm_hash_table_any(ht, more_100 , NULL));
        -:  264:  // Test with predicate < 10, with only keys smaller than 10.
        1:  265:  ioopm_hash_table_insert(ht, int_elem(0), str_elem("Abbelito"));
        1:  266:  ioopm_hash_table_insert(ht, int_elem(10), str_elem("Ollibobbo"));
        1:  267:  ioopm_hash_table_insert(ht, int_elem(20), str_elem("Faffe"));
        1:  268:  ioopm_hash_table_insert(ht, int_elem(300), str_elem("Willywonka"));
        1:  269:  ioopm_hash_table_insert(ht, int_elem(200), str_elem("Kanga"));
        1:  270:  ioopm_hash_table_insert(ht, int_elem(170), str_elem("Kanga"));
        1:  271:  CU_ASSERT_TRUE(ioopm_hash_table_any(ht, more_100 , NULL));
        1:  272:  ioopm_hash_table_destroy(ht);
        1:  273:}
        -:  274:
        -:  275:
        5:  276:static void apply_fun (elem_t key, elem_t *value, void *x)
        -:  277:{
        5:  278:  if (key.i <= 10)
        -:  279:  {
        4:  280:    *value = str_elem("ABBE JOBBAR");
        -:  281:  }
        -:  282:  else{
        1:  283:    *value = str_elem("Olli knegar");
        -:  284:  }
        5:  285:}
        -:  286:
        1:  287:void test_apply_to_all(){
        1:  288:  ioopm_hash_table_t *ht = ioopm_hash_table_create((ioopm_hash_function)extract_int_hash_key, cmp_str); //Skapa ht
        1:  289:  ioopm_hash_table_insert(ht, int_elem(0), str_elem("Abbelito"));
        1:  290:  ioopm_hash_table_insert(ht, int_elem(1), str_elem("Ollibobbo"));
        1:  291:  ioopm_hash_table_insert(ht, int_elem(2), str_elem("Faffe"));
        1:  292:  ioopm_hash_table_insert(ht, int_elem(3), str_elem("Willywonka"));
        1:  293:  ioopm_hash_table_insert(ht, int_elem(18), str_elem("Kanga"));
        -:  294:
        1:  295:  ioopm_hash_table_apply_to_all(ht, apply_fun, NULL);
        -:  296:
        -:  297:  // Check that value is changed for valid key
        1:  298:  CU_ASSERT_EQUAL(ioopm_hash_table_lookup(ht, int_elem(1)).value.str, "ABBE JOBBAR");
        -:  299:  // Check that value is unchanged for valid key
        -:  300:
        -:  301:  //cmp_str(ioopm_hash_table_lookup(ht, int_elem(18)).value.str, str_elem("ABBE JOBBAR"));
        1:  302:  CU_ASSERT_EQUAL(ioopm_hash_table_lookup(ht, int_elem(18)).value.str, "Olli knegar");
        -:  303:
        -:  304:  // Check that value is unchanged for invalid key
        1:  305:  CU_ASSERT_NOT_EQUAL(ioopm_hash_table_lookup(ht, int_elem(19)).value.str, "ABBE JOBBAR");
        1:  306:  ioopm_hash_table_destroy(ht);
        1:  307:}
        -:  308:
        -:  309:///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        -:  310:
        1:  311:int main() {
        -:  312:  // First we try to set up CUnit, and exit if we fail
        1:  313:  if (CU_initialize_registry() != CUE_SUCCESS)
    #####:  314:  return CU_get_error();
        -:  315:
        -:  316:  // We then create an empty test suite and specify the name and
        -:  317:  // the init and cleanup functions
        1:  318:  CU_pSuite my_test_suite = CU_add_suite("My awesome test suite", init_suite, clean_suite);
        1:  319:  if (my_test_suite == NULL) {
        -:  320:    // If the test suite could not be added, tear down CUnit and exit
    #####:  321:    CU_cleanup_registry();
    #####:  322:    return CU_get_error();
        -:  323:  }
        -:  324:
        -:  325:  // This is where we add the test functions to our test suite.
        -:  326:  // For each call to CU_add_test we specify the test suite, the
        -:  327:  // name or description of the test, and the function that runs
        -:  328:  // the test in question. If you want to add another test, just
        -:  329:  // copy a line below and change the information
        1:  330:  if (
        2:  331:    (CU_add_test(my_test_suite, "Create and Destroy HT", test_create_destroy)==NULL)||
        2:  332:    (CU_add_test(my_test_suite, "Insert once", test_insert_once)==NULL)||
        2:  333:    (CU_add_test(my_test_suite, "Test lookup", test_lookup_empty)==NULL)||
        2:  334:    (CU_add_test(my_test_suite, "Remove exsisting entry", test_remove_exsisting)==NULL)||
        2:  335:    (CU_add_test(my_test_suite, "Remove nonexsisting entry", test_remove_nonexsisting)==NULL)||
        2:  336:    (CU_add_test(my_test_suite, "Size of the hash_table", test_counter_one)==NULL)||
        2:  337:    (CU_add_test(my_test_suite, "Test hash table empty", test_is_hash_table_empty)==NULL)||
        2:  338:    (CU_add_test(my_test_suite, "Test clear", test_clear_hash_table)==NULL)||
        2:  339:    (CU_add_test(my_test_suite, "Test keys", test_hash_table_keys)==NULL)||
        2:  340:    (CU_add_test(my_test_suite, "Test values", test_hash_table_values)==NULL)||
        2:  341:    (CU_add_test(my_test_suite, "Test has key", test_has_key)==NULL)||
        2:  342:    (CU_add_test(my_test_suite, "Test has value", test_has_value)==NULL)||
        2:  343:    (CU_add_test(my_test_suite, "Test has value (string key)", test_has_value_string_key)==NULL)||
        2:  344:    (CU_add_test(my_test_suite, "Test the all function", test_all_function)==NULL)||
        2:  345:    (CU_add_test(my_test_suite, "Test the any function", test_any_function)==NULL)||
        1:  346:    (CU_add_test(my_test_suite, "Test the apply function", test_apply_to_all)==NULL)||
        -:  347:    0
        -:  348:  )
        -:  349:  {
        -:  350:    // If adding any of the tests fails, we tear down CUnit and exit
    #####:  351:    CU_cleanup_registry();
    #####:  352:    return CU_get_error();
        -:  353:  }
        -:  354:
        -:  355:  // Set the running mode. Use CU_BRM_VERBOSE for maximum output.
        -:  356:  // Use CU_BRM_NORMAL to only print errors and a summary
        1:  357:  CU_basic_set_mode(CU_BRM_VERBOSE);
        -:  358:
        -:  359:  // This is where the tests are actually run!
        1:  360:  CU_basic_run_tests();
        -:  361:
        -:  362:  // Tear down CUnit before exiting
        1:  363:  CU_cleanup_registry();
        1:  364:  return CU_get_error();
        -:  365:}
